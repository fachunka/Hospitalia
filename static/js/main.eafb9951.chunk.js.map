{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["glide","name","direction","screenStyle","display","alignItems","justifyContent","document","getElementById","style","height","App","exact","path","backgroundColor","to","transition","screen","screenProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"mPASAA,gBAAM,CACJC,KAAM,eAERD,gBAAM,CACJC,KAAM,cACNC,UAAW,UAGb,IAAMC,EAAc,CAClBC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAMlBC,SAASC,eAAe,QAAQC,MAAMC,OAAS,QAwHhCC,MAnGf,WACE,OA4BE,aA3BA,CA2BC,gBAAD,UAIE,eAAC,aAAD,WAGE,cAAC,QAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SAGE,cAAC,SAAD,CACEJ,MAAK,aACHK,gBAAiB,WACdX,GAHP,SASE,cAAC,OAAD,CAAMY,GAAG,KAAKC,WAAW,aAAzB,kCAMJ,eAAC,QAAD,CACEJ,OAAK,EACLC,KAAK,KACLI,QAAM,EACNC,YAAa,CACXT,MAAM,aACJK,gBAAiB,WACdX,IAPT,UAWE,cAAC,OAAD,CAAMY,GAAG,IAAIC,WAAW,cAAxB,+BAGA,cAAC,OAAD,CAAMD,GAAG,KAAKC,WAAW,aAAzB,qBAKF,cAAC,QAAD,CAAOJ,OAAK,EAACC,KAAK,KAAlB,SAGE,eAAC,SAAD,CACEJ,MAAK,aACHK,gBAAiB,WACdX,GAHP,UASE,cAAC,OAAD,CAAMY,GAAG,IAAIC,WAAW,cAAxB,+BAGA,cAAC,OAAD,CAAMD,GAAG,KAAKC,WAAW,cAAzB,uCC3HGG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvB,SAASC,eAAe,SAM1BW,M","file":"static/js/main.eafb9951.chunk.js","sourcesContent":["import './App.css';\n// import { BrowserRouter, Switch, Route, Link } from 'react-router-dom';\n// import { PageTransition } from '@steveeeie/react-page-transition';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"react-tiger-transition/styles/main.min.css\";\nimport { Navigation, Route, Screen, Link, glide } from \"react-tiger-transition\";\n\n\n// inject glide styles\nglide({\n  name: 'glide-left'\n});\nglide({\n  name: 'glide-right',\n  direction: 'right'\n});\n\nconst screenStyle = {\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\"\n};\n\n// you will need to set the height of  <Navigation /> wrapper,\n// in this case, it is the root node,\n// better to do this on your stylesheet\ndocument.getElementById(\"root\").style.height = \"100vh\";\n\n\n\nconst Links = () => (\n  <>\n    <Link to=\"/\">Home</Link>\n    <Link to=\"/about\">About</Link>\n  </>\n);\n\nconst Home = props => {\n  return (\n    <h1> Home</h1>\n  );\n};\n\nconst About = props => {\n  return <h1>About</h1>;\n};\n\nfunction App() {\n  return (\n    // <BrowserRouter>\n    //   <div className=\"portrait\">\n    //     <div className=\"turn\">\n    //       <img src=\"hospitalia/img/phone-rotate-landscape.svg\" alt=\"Rotate icon\" />\n    //       <p>Please rotate your phone</p>\n    //     </div>\n    //   </div>\n    //   <div className=\"landscape\">\n    //     <Links />\n    //     <Route\n    //       render={({ location }) => {\n    //         return (\n    //           <PageTransition\n    //             preset=\"moveToLeftFromRight\"\n    //             transitionKey={location.pathname}\n    //           >\n    //             <Switch location={location}>\n    //               <Route exact path=\"/\" component={Home} />\n    //               <Route exact path=\"/about\" component={About} />\n    //             </Switch>\n    //           </PageTransition>\n    //         );\n    //       }}\n    //     />\n    //   </div>\n\n    // </BrowserRouter>\n    <Router>\n      {/* BrowserRouter from react-router-dom */}\n\n      {/* Context provider for transitions */}\n      <Navigation>\n        {/* Use Route the same way you use\n            react-router Route with children */}\n        <Route exact path=\"/\">\n          {/* Screen is just a div container\n              with some basic style */}\n          <Screen\n            style={{\n              backgroundColor: \"#ffa000\",\n              ...screenStyle\n            }}\n          >\n            {/* Use Link the same way you use\n                react-router Link, but\n                add transition */}\n            <Link to=\"/a\" transition='glide-left'>\n              Check out page A\n          </Link>\n          </Screen>\n        </Route>\n\n        <Route\n          exact\n          path=\"/a\"\n          screen // shorthand to wrap children with screen\n          screenProps={{\n            style: {\n              backgroundColor: \"#607d8b\",\n              ...screenStyle\n            }\n          }}\n        >\n          <Link to=\"/\" transition='glide-right'>\n            Back to home page\n        </Link>\n          <Link to=\"/b\" transition='glide-left'>\n            To b\n        </Link>\n        </Route>\n\n        <Route exact path=\"/b\">\n          {/* Screen is just a div container\n              with some basic style */}\n          <Screen\n            style={{\n              backgroundColor: \"#ffa000\",\n              ...screenStyle\n            }}\n          >\n            {/* Use Link the same way you use\n                react-router Link, but\n                add transition */}\n            <Link to=\"/\" transition='glide-right'>\n              Back to home page\n          </Link>\n            <Link to=\"/a\" transition='glide-right'>\n              Back to page A\n          </Link>\n          </Screen>\n        </Route>\n      </Navigation>\n    </Router>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}