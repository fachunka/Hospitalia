{"version":3,"sources":["components/PersonForm.js","App.js","reportWebVitals.js","index.js"],"names":["PersonForm","props","onSubmit","addName","value","newName","onChange","handleNameChange","Button","type","App","useState","persons","setPersons","setNewName","glide","name","direction","opacity","screenStyle","display","flexDirection","alignItems","justifyContent","backgroundImage","backgroundSize","document","getElementById","style","height","className","src","alt","exact","path","backgroundColor","Container","Row","Col","xs","span","offset","event","preventDefault","nameObject","id","length","concat","console","log","target","to","transition","screen","screenProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e6f14a4a.chunk.js","sourcesContent":["import React from 'react'\nimport Button from 'react-bootstrap/Button';\n\n\nconst PersonForm = (props) => {\n    return (\n        <form onSubmit={props.addName}>\n            <div>\n                name:\n          <input\n                    value={props.newName}\n                    onChange={props.handleNameChange}\n                />\n            </div>\n            <div>\n                <Button type=\"submit\">add</Button>\n            </div>\n        </form>\n    )\n}\n\nexport default PersonForm","import './App.css';\nimport React, { useState, useEffect } from 'react'\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Navigation, Route, Screen, Link, glide } from \"react-tiger-transition\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nimport PersonForm from './components/PersonForm.js'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-tiger-transition/styles/main.min.css\";\n\n\nconst App = () => {\n  // Data\n  const [persons, setPersons] = useState([])\n\n  // Variables\n  const [newName, setNewName] = useState('')\n\n\n\n  // inject glide styles\n  glide({\n    name: 'glide-left',\n    direction: 'left',\n    opacity: 0.3\n  });\n  glide({\n    name: 'glide-right',\n    direction: 'right',\n    opacity: 0.3\n  });\n\n  const screenStyle = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundImage: `url(${\"./hospitalia/img/GH_bg_v01.png\"})`,\n    backgroundSize: \"cover\"\n  };\n\n  // you will need to set the height of  <Navigation /> wrapper,\n  // in this case, it is the root node,\n  // better to do this on your stylesheet\n  document.getElementById(\"root\").style.height = \"100vh\";\n\n\n  const addName = (event) => {\n\n    // Prevents default action (reloading the page on form submission)\n    event.preventDefault()\n\n    const nameObject = {\n      name: newName,\n      id: persons.length + 1,\n    }\n\n    setPersons(persons.concat(nameObject))\n    setNewName('')\n    console.log(persons);\n  }\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n\n  return (\n    <Router>\n      <div className=\"portrait\">\n        <div className=\"turn\">\n          <img src=\"hospitalia/img/phone-rotate-landscape.svg\" alt=\"Rotate icon\" />\n          <p>Please rotate your phone</p>\n        </div>\n      </div>\n      <div className=\"landscape\">\n        {/* BrowserRouter from react-router-dom */}\n\n        {/* Context provider for transitions */}\n        <Navigation>\n          {/* Use Route the same way you use\n            react-router Route with children */}\n          <Route exact path=\"/\">\n            {/* Screen is just a div container\n              with some basic style */}\n            <Screen\n              style={{\n                backgroundColor: \"#ffa000\",\n                ...screenStyle\n              }}\n            >\n              <Container>\n                <Row>\n                  <Col xs={{ span: 9, offset: 1 }}>\n                    <h1>Create an adventure for your child.</h1>\n                  </Col>\n                </Row>\n                <Row className=\"mt-3 mb-3\">\n                  <Col xs={{ span: 9, offset: 1 }}>\n                    <PersonForm\n                      addName={addName}\n                      newName={newName}\n                      handleNameChange={handleNameChange}\n                    />\n                  </Col>\n                </Row>\n                <Row>\n                  <Link to=\"/a\" transition='glide-left' className=\"btn btn-primary ml-auto\" type=\"button\">Next</Link>\n                </Row>\n              </Container>\n              {/* Use Link the same way you use\n                react-router Link, but\n                add transition */}\n            </Screen>\n          </Route>\n\n          <Route\n            exact\n            path=\"/a\"\n            screen // shorthand to wrap children with screen\n            screenProps={{\n              style: {\n                backgroundColor: \"#6655bb\",\n                ...screenStyle\n              }\n            }}\n          >\n            <Container>\n              <Row>\n                <h1>Create an adventure for your child.</h1>\n              </Row>\n              <Row className=\"mt-3 mb-3\">\n              </Row>\n              <Row>\n                <Link to=\"/\" transition='glide-right' className=\"btn btn-primary mr-auto\" type=\"button\">Back</Link>\n                <Link to=\"/b\" transition='glide-left' className=\"btn btn-primary ml-auto\" type=\"button\">Next</Link>\n              </Row>\n            </Container>\n          </Route>\n\n          <Route exact path=\"/b\">\n            {/* Screen is just a div container\n              with some basic style */}\n            <Screen\n              style={{\n                backgroundColor: \"#ffa0bb\",\n                ...screenStyle\n              }}\n            >\n              {/* Use Link the same way you use\n                react-router Link, but\n                add transition */}\n              <Container>\n                <Row>\n                  <h1>Create an adventure for your child.</h1>\n                </Row>\n                <Row className=\"mt-3 mb-3\">\n                </Row>\n                <Row>\n                  {/* <Col xs={{ span: 9, offset: 1 }}> */}\n                    <Link to=\"/a\" transition='glide-right' className=\"btn btn-primary mr-auto\" type=\"button\">Back</Link>\n                  {/* </Col> */}\n                </Row>\n              </Container>\n            </Screen>\n          </Route>\n        </Navigation>\n      </div>\n    </Router>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}